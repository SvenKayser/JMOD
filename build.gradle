buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'

version = "1.0alpha1"
group= "com.jeffpeng.jmod" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "jmod"
sourceCompatibility = 1.8
targetCompatibility = 1.8


minecraft {
    version = "1.7.10-10.13.4.1558-1.7.10"
    runDir = "eclipse"
}

jar {
		manifest {
			attributes 'FMLAT': 'jmod_at.cfg'
			attributes 'FMLCorePlugin': 'com.jeffpeng.jmod.asm.JMODFMLLoadingPlugin','FMLCorePluginContainsFMLMod': 'true'
			
            
		}
}

dependencies {
	compile 'org.ow2.asm:asm-debug-all:5.0.3'
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

sourceSets {
    main {
        java {
            srcDirs += 'src/api/java'
            srcDirs += 'src/main/java/'
        }

        resources {
            srcDir "src/main/resources/"
        }
    }
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task libJar(type: Jar){
	from sourceSets.main.output
	exclude "assets/si.core/textures/**";
	classifier = 'libonly'
	
}


task silibreplace << {
	ant.replaceregexp(
		file: "src/main/java/com/jeffpeng/jmod/util/SIConfigRepresentation.java",
		match: "\\/\\*\\#MARK1\\*\\/if\\(false\\)",
		replace:'/*#MARK1*/if(true)'
	)
}

jar.mustRunAfter silibreplace


task silibrestore << {
	ant.replaceregexp(
		file: "src/main/java/com/jeffpeng/jmod/util/SIConfigRepresentation.java",
		replace: "/*#MARK1*/if(false)",
		match:'\\/\\*\\#MARK1\\*\\/if\\(true\\)'
	)
}

task buildtypelib(dependsOn: ['silibreplace','silibrestore','libJar','reobf']) << {

}

task sitestreplace << {

	version = "untyped-devtest"
	ant.replaceregexp(
		file: "src/main/java/com/jeffpeng/jmod/JMOD.java",
		match: "\\/\\*\\#MARK1\\*\\/if\\(false\\)",
		replace:'/*#MARK1*/if(true)'
	)
}

task sitestrestore << {
	ant.replaceregexp(
		file: "src/main/java/com/jeffpeng/jmod/JMOD.java",
		replace: "/*#MARK1*/if(false)",
		match:'\\/\\*\\#MARK1\\*\\/if\\(true\\)'
	)
}

task buildtypetest(dependsOn: ['sitestreplace','sitestrestore','jar','test','reobf','assemble'])

libJar.mustRunAfter classes
libJar.mustRunAfter silibreplace
classes.mustRunAfter sitestreplace
